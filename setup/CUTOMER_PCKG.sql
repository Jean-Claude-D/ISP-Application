CREATE OR REPLACE PACKAGE CUSTOMER_PCKG IS
	/* MAIN INFORMATION ABOUT A CUSTOMER */
	TYPE CUSTOMER_RECORD IS RECORD (
		USERNAME VARCHAR2,
		PHONE CHAR,
		EMAIL VARCHAR2,
		ADDRESS VARCHAR2,
		INTERNET_PACKAGE VARCHAR2
	);
	/* MAIN INFORMATION ABOUT AN INVOICE */
	TYPE INVOICE_RECORD IS RECORD (
		INTERNET_PACKAGE VARCHAR2,
		DUE_DATE DATE,
		CREATED_DATE DATE,
		BALANCE NUMBER,
	);
	/* MAIN INFORMATION ABOUT DAILY USAGE FOR A CUSTOMER */
	TYPE DAILY_USAGE_RECORD IS RECORD (
		UPLOAD_GB NUMBER,
		DOWNLOAD_GB NUMBER,
		DAY_USAGE DATE
	);
	/* MAIN INFORMATION ABOUT A CUSTOMER'S SERVICE REQUEST */
	TYPE REQUEST_RECORD IS RECORD (
		SCHEDULED DATE,
		DEPARTMENT VARCHAR2,
		DETAILS VARCHAR2
	);
	/* ALLOWS FOR USER AUTHENTICATION */
	CURSOR LOGIN (
		IN_USERNAME IN VARCHAR2,
		IN_PASSWORD IN CHAR
	) RETURN CUSTOMER_RECORD;
	/* SHOW A USER PACKAGE HE/SHE MAY UPGRADE TO */
	CURSOR AVAILABLE_PACKAGES (
		IN_USERNAME IN VARCHAR2
	) RETURN INTERNET_PACKAGE%ROWTYPE;
	DOWNGRADE_NOT_ALLOWED EXCEPTION;
	/* DOES THE UPGRADE OF PACKAGES */
	PROCEDURE UPGRADE_PACKAGE (
		IN_USERNAME IN VARCHAR2,
		IN_NEW_PACKAGE IN VARCHAR2
	);
	/* PROVIDES THE ABILITY TO SEARCH THROUGH A CUSTOMER'S DAILY USAGE STARTING FROM MOST RECENT ONES */
	CURSOR RECENT_DAILY_USAGE (
		IN_USERNAME IN VARCHAR2
	) RETURN DAILY_USAGE_RECORD;
	/* PROVIDES THE ABILITY TO SEARCH THROUGH A CUSTOMER'S INVOICE STARTING FROM MOST RECENT ONES */
	CURSOR RECENT_INVOICE_FOR_CUSTOMER (
		IN_USERNAME IN VARCHAR2
	) RETURN INVOICE_RECORD;
	/* ALLOWS FOR CUSTOMER TO MAKE A REQUEST OF SERVICE */
	PROCEDURE REQUEST_SERVICE (
		IN_USERNAME IN VARCHAR2,
		IN_DATE IN DATE,
		IN_DEPARTMENT IN VARCHAR2,
		IN_DETAILS IN VARCHAR2
	);
	/* ALLOWS FOR CUSTOMER TO SEE WHICH OF THEIR REQUESTED APPOINTMENT WAS CONFIRMED OR NOT */
	CURSOR PENDING_REQUEST (
		IN_USERNAME IN VARCHAR2
	) RETURN REQUEST_RECORD;
	CURSOR ACCEPTED_APPOINTMENT (
		IN_USERNAME IN VARCHAR2
	) RETURN REQUEST_RECORD;
	INVALID_LOGIN EXCEPTION;
	PROCEDURE CHANGE_PASSWORD (
		IN_USERNAME IN VARCHAR2,
		IN_NEW_PASSWORD IN CHAR,
		IN_NEW_SALT IN CHAR,
		IN_OLD_PASSWORD IN CHAR /* CONFIRMATION */
	);
END CUSTOMER_PCKG;
CREATE OR REPLACE PACKAGE BODY CUSTOMER_PCKG IS
	CURSOR LOGIN (
		IN_USERNAME IN VARCHAR2,
		IN_PASSWORD IN CHAR
	) RETURN CUSTOMER_RECORD IS
		SELECT USERNAME, PHONE, EMAIL,
		ADDRESS, INTERNET_PACKAGE
		FROM CUSTOMER
		WHERE (ACTIVE = '1') AND (USERNAME = IN_USERNAME) AND (IN_PASSWORD = PASSWORD);
	CURSOR AVAILABLE_PACKAGES (
		IN_USERNAME IN VARCHAR2
	) RETURN INTERNET_PACKAGE%ROWTYPE IS
		SELECT *
		FROM INTERNET_PACKAGE
		WHERE MONTHLY_PRICE > (
			SELECT IP.MONTHLY_PRICE
			FROM INTERNET_PACKAGE IP JOIN CUSTOMER C
			ON IP.NAME = C.INTERNET_PACKAGE
		);
	PROCEDURE UPGRADE_PACKAGE (
		IN_USERNAME IN VARCHAR2,
		IN_NEW_PACKAGE IN VARCHAR2
	) IS
		V_CURRENT_PACKAGE_COST INTERNET_PACKAGE.MONTHLY_PRICE%TYPE;
		V_NEW_PACKAGE_COST INTERNET_PACKAGE.MONTHLY_PRICE%TYPE;
	BEGIN
		/* GETTING PRICES OF OLD AND NEW PACKAGE */
		SELECT MONTHLY_PRICE INTO V_CURRENT_PACKAGE_COST
		FROM INTERNET_PACKAGE IP JOIN CUSTOMER C
		ON IP.NAME = C.INTERNET_PACKAGE
		WHERE C.USERNAME = IN_USERNAME;
		SELECT MONTHLY_PRICE INTO V_NEW_PACKAGE_COST
		FROM INTERNET_PACKAGE IP JOIN CUSTOMER C
		ON IP.NAME = C.INTERNET_PACKAGE
		WHERE IP.NAME = IN_NEW_PACKAGE;
		/* CHECKING IF IT REALLY IS A DOWNGRADE */
		IF V_CURRENT_PACKAGE_COST < V_NEW_PACKAGE_COST THEN
			UPDATE CUSTOMER
			SET INTERNET_PACKAGE = IN_NEW_PACKAGE
			WHERE USERNAME = IN_USERNAME;
		ELSE
			RAISE DOWNGRADE_NOT_ALLOWED;
		END IF;
	END UPGRADE_PACKAGE;
	CURSOR RECENT_DAILY_USAGE (
		IN_USERNAME IN VARCHAR2
	) RETURN DAILY_USAGE_RECORD IS
		SELECT UPLOAD_GB, DOWNLOAD_GB, DAY_USAGE
		FROM DAILY_USAGE
		WHERE CUSTOMER = IN_USERNAME
		ORDER BY DAY_USAGE;
	CURSOR RECENT_INVOICE_FOR_CUSTOMER (
		IN_USERNAME IN VARCHAR2
	) RETURN INVOICE_RECORD IS
		SELECT INTERNET_PACKAGE, DUE_DATE,
		CREATED_DATE, BALANCE
		FROM INVOICE
		START WITH ID = (
			SELECT ID
			FROM INVOICE
			WHERE CUSTOMER = IN_USERNAME
			HAVING CREATED_DATE = (
				SELECT MAX(CREATED_DATE)
				FROM INVOICE
				WHERE CUSTOMER = IN_USERNAME
			)
		)
		CONNECT BY PRIOR PREVIOUS = ID
		ORDER SIBLINGS BY CREATED_DATE;
	PROCEDURE REQUEST_SERVICE (
		IN_USERNAME IN VARCHAR2,
		IN_DATE IN DATE,
		IN_DEPARTMENT IN VARCHAR2,
		IN_DETAILS IN VARCHAR2
	) IS
	BEGIN
		INSERT INTO REQUEST
		(APPOINTMENT, CUSTOMER,
		SCHEDULED, DEPARTMENT, DETAILS)
		VALUES
		(NULL, IN_USERNAME,
		IN_DATE, IN_DEPARTMENT, IN_DETAILS);
	END REQUEST_SERVICE;
	CURSOR PENDING_REQUEST (
		IN_USERNAME IN VARCHAR2
	) RETURN REQUEST_RECORD IS
		SELECT SCHEDULED, DEPARTMENT, DETAILS
		FROM REQUEST
		WHERE (CUSTOMER = IN_USERNAME) AND
		(APPOINTMENT IS NULL);
	CURSOR ACCEPTED_APPOINTMENT (
		IN_USERNAME IN VARCHAR2
	) RETURN REQUEST_RECORD IS
		SELECT SCHEDULED, DEPARTMENT, DETAILS
		FROM REQUEST
		WHERE (CUSTOMER = IN_USERNAME) AND
		(APPOINTMENT IS NOT NULL);
	PROCEDURE CHANGE_PASSWORD (
		IN_USERNAME IN VARCHAR2,
		IN_NEW_PASSWORD IN CHAR,
		IN_NEW_SALT IN CHAR,
		IN_OLD_PASSWORD IN CHAR
	) IS
		V_OLD_PASSWORD CUSTOMER.PASSWORD%TYPE
	BEGIN
		SELECT PASSWORD INTO V_OLD_PASSWORD
		FROM CUSTOMER
		WHERE USERNAME = IN_USERNAME;
		IF V_OLD_PASSWORD = IN_OLD_PASSWORD THEN
			UPDATE CUSTOMER
			SET PASSWORD = IN_NEW_PASSWORD
			WHERE USERNAME = IN_USERNAME;
		ELSE
			RAISE INVALID_LOGIN;
		END IF;
	END CHANGE_PASSWORD;
END CUSTOMER_PCKG;